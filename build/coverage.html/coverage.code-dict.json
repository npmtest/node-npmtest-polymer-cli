{"/home/travis/build/npmtest/node-npmtest-polymer-cli/test.js":"/* istanbul instrument in package npmtest_polymer_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/lib.npmtest_polymer_cli.js":"/* istanbul instrument in package npmtest_polymer_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_polymer_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_polymer_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-polymer-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_polymer_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_polymer_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_polymer_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_polymer_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_polymer_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_polymer_cli.__dirname + '/lib.npmtest_polymer_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/node_modules/polymer-cli/lib/polymer-cli.js":"/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\"use strict\";\nconst logging = require('plylog');\nconst commandLineArgs = require('command-line-args');\nconst commandLineCommands = require('command-line-commands');\nconst args_1 = require('./args');\nconst build_1 = require('./commands/build');\nconst help_1 = require('./commands/help');\nconst init_1 = require('./commands/init');\nconst lint_1 = require('./commands/lint');\nconst serve_1 = require('./commands/serve');\nconst test_1 = require('./commands/test');\nconst project_config_1 = require('./project-config');\nconst logger = logging.getLogger('cli.main');\nprocess.on('uncaughtException', (error) => {\n    logger.error(`Uncaught exception: ${error}`);\n    if (error.stack)\n        logger.error(error.stack);\n    process.exit(1);\n});\nprocess.on('unhandledRejection', (error) => {\n    logger.error(`Promise rejection: ${error}`);\n    if (error.stack)\n        logger.error(error.stack);\n    process.exit(1);\n});\nclass PolymerCli {\n    constructor(args, config) {\n        this.commands = new Map();\n        // If the \"--quiet\"/\"-q\" flag is ever present, set our global logging\n        // to quiet mode. Also set the level on the logger we've already created.\n        if (args.indexOf('--quiet') > -1 || args.indexOf('-q') > -1) {\n            logging.setQuiet();\n        }\n        // If the \"--verbose\"/\"-v\" flag is ever present, set our global logging\n        // to verbose mode. Also set the level on the logger we've already created.\n        if (args.indexOf('--verbose') > -1 || args.indexOf('-v') > -1) {\n            logging.setVerbose();\n        }\n        this.args = args;\n        logger.debug('got args:', { args: args });\n        if (config) {\n            this.defaultConfig = config;\n            logger.debug('got default config from constructor argument:', { config: this.defaultConfig });\n        }\n        else {\n            this.defaultConfig = project_config_1.ProjectConfig.fromConfigFile('polymer.json');\n            logger.debug('got default config from file:', { config: this.defaultConfig });\n        }\n        this.addCommand(new build_1.BuildCommand());\n        this.addCommand(new help_1.HelpCommand(this.commands));\n        this.addCommand(new init_1.InitCommand());\n        this.addCommand(new lint_1.LintCommand());\n        this.addCommand(new serve_1.ServeCommand());\n        this.addCommand(new test_1.TestCommand());\n    }\n    addCommand(command) {\n        logger.debug('adding command', command.name);\n        this.commands.set(command.name, command);\n    }\n    mergeDefinitions(command, globals) {\n        let mergedArgs = new Map();\n        let defaultOption = null;\n        let addAll = (args) => {\n            for (let definition of args) {\n                let name = definition.name;\n                let oldDefinition = mergedArgs.get(name);\n                if (oldDefinition == null) {\n                    mergedArgs.set(definition.name, definition);\n                }\n                else {\n                    let mergedDefinition = Object.assign({}, oldDefinition);\n                    for (let propName of Object.keys(definition)) {\n                        if (propName === 'name')\n                            continue;\n                        let propValue = definition[propName];\n                        let oldProp = oldDefinition[propName];\n                        if (oldProp == null) {\n                            mergedDefinition[propName] = propValue;\n                        }\n                        else {\n                            throw new Error(`duplicate argument definition in ${command.name}: ${name}.${propName}`);\n                        }\n                    }\n                    mergedArgs.set(name, mergedDefinition);\n                    definition = mergedDefinition;\n                }\n                if (definition.defaultOption) {\n                    if (defaultOption && defaultOption !== name) {\n                        throw new Error(`Multiple default arguments in ${command.name}: ` +\n                            `${defaultOption} and ${name}`);\n                    }\n                    defaultOption = name;\n                }\n            }\n        };\n        if (globals)\n            addAll(globals);\n        if (command.args)\n            addAll(command.args);\n        return Array.from(mergedArgs.values());\n    }\n    run() {\n        let helpCommand = this.commands.get('help');\n        let commandNames = Array.from(this.commands.keys());\n        let parsedArgs;\n        logger.debug('running...');\n        // If the \"--version\" flag is ever present, just print\n        // the current version. Useful for globally installed CLIs.\n        if (this.args.indexOf('--version') > -1) {\n            console.log(require('../package.json').version);\n            return Promise.resolve();\n        }\n        try {\n            parsedArgs = commandLineCommands(commandNames, this.args);\n        }\n        catch (error) {\n            // Polymer CLI needs a valid command name to do anything. If the given\n            // command is invalid, run the generalized help command with default\n            // config. This should print the general usage information.\n            if (error.name === 'INVALID_COMMAND') {\n                if (error.command) {\n                    logger.warn(`'${error.command}' is not an available command.`);\n                }\n                return helpCommand.run({ command: error.command }, new project_config_1.ProjectConfig(this.defaultConfig));\n            }\n            // If an unexpected error occurred, propagate it\n            throw error;\n        }\n        let commandName = parsedArgs.command;\n        let commandArgs = parsedArgs.argv;\n        let command = this.commands.get(commandName);\n        logger.debug(`command '${commandName}' found, parsing command args:`, { args: commandArgs });\n        let commandDefinitions = this.mergeDefinitions(command, args_1.globalArguments);\n        let commandOptionsRaw = commandLineArgs(commandDefinitions, commandArgs);\n        let commandOptions = (commandOptionsRaw && commandOptionsRaw['_all']);\n        logger.debug(`command options parsed from args:`, commandOptions);\n        let config = new project_config_1.ProjectConfig(this.defaultConfig, commandOptions);\n        logger.debug(`final project configuration generated:`, config);\n        // Help is a special argument for displaying help for the given command.\n        // If found, run the help command instead, with the given command name as\n        // an option.\n        if (commandOptions['help']) {\n            logger.debug(`'--help' option found, running 'help' for given command...`);\n            return helpCommand.run({ command: commandName }, config);\n        }\n        logger.debug('Running command...');\n        return command.run(commandOptions, config);\n    }\n}\nexports.PolymerCli = PolymerCli;\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/node_modules/polymer-cli/lib/args.js":"/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\"use strict\";\nconst environments_1 = require('./environments/environments');\nexports.globalArguments = [\n    {\n        name: 'env',\n        description: 'The environment to use to specialize certain commands, '\n            + 'like build',\n        type: function (value) {\n            return environments_1.buildEnvironment(value);\n        },\n        group: 'global',\n    },\n    {\n        name: 'entrypoint',\n        description: 'The main HTML file that will be requested for all routes.',\n        group: 'global',\n    },\n    {\n        name: 'shell',\n        type: String,\n        description: 'The app shell HTML import',\n        group: 'global',\n    },\n    {\n        name: 'fragment',\n        type: String,\n        multiple: true,\n        description: 'HTML imports that are loaded on-demand.',\n        group: 'global',\n    },\n    {\n        name: 'root',\n        type: String,\n        description: 'The directory where your project exists. ' +\n            'Defaults to the current working directory',\n        group: 'global',\n    },\n    {\n        name: 'sources',\n        type: String,\n        multiple: true,\n        description: 'Glob(s) that match your project source files. ' +\n            'Defaults to `src/**/*`.',\n        group: 'global',\n    },\n    {\n        name: 'include-dependencies',\n        type: String,\n        multiple: true,\n        description: 'Glob(s) that match any additional dependencies not caught ' +\n            'by the analyzer to include with your build.',\n        group: 'global',\n    },\n    {\n        name: 'verbose',\n        description: 'turn on debugging output',\n        type: Boolean,\n        alias: 'v',\n        group: 'global',\n    },\n    {\n        name: 'help',\n        description: 'print out helpful usage information',\n        type: Boolean,\n        alias: 'h',\n        group: 'global',\n    },\n    {\n        name: 'quiet',\n        description: 'silence output',\n        type: Boolean,\n        alias: 'q',\n        group: 'global',\n    },\n];\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/node_modules/polymer-cli/lib/environments/environments.js":"/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\"use strict\";\nclass EnvironmentMap extends Map {\n}\n// TODO(garlicnation): Bring this into polytool.ts\nconst environments = new EnvironmentMap();\n// TODO(garlicnation): Re-enable\n// environments.set('reyserve', ReyServe);\n/**\n * Builds an environment with the given name.\n */\nfunction buildEnvironment(name) {\n    return environments.has(name) && new (environments.get(name.toLowerCase()))();\n}\nexports.buildEnvironment = buildEnvironment;\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/node_modules/polymer-cli/lib/commands/build.js":"/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\"use strict\";\nconst logging = require('plylog');\nlet logger = logging.getLogger('cli.command.build');\nclass BuildCommand {\n    constructor() {\n        this.name = 'build';\n        this.description = 'Builds an application-style project';\n        this.args = [\n            {\n                name: 'sw-precache-config',\n                defaultValue: 'sw-precache-config.js',\n                description: 'Path to an sw-precache configuration to be ' +\n                    'used for service worker generation.'\n            },\n            {\n                name: 'insert-dependency-links',\n                type: Boolean,\n                description: 'Flatten dependency tree downloads by inserting ' +\n                    'additional `<link rel=\"prefetch\">` tags into ' +\n                    'entrypoint and `<link rel=\"import\">` tags into fragments and shell.'\n            },\n            {\n                name: 'html.collapseWhitespace',\n                type: Boolean,\n                description: 'Collapse whitespace in HTML files'\n            }\n        ];\n    }\n    run(options, config) {\n        // Defer dependency loading until this specific command is run\n        const build = require('../build/build').build;\n        let buildOptions = {\n            swPrecacheConfig: options['sw-precache-config'],\n            insertDependencyLinks: options['insert-dependency-links'],\n            html: {},\n            css: {},\n            js: {},\n        };\n        if (options['html.collapseWhitespace']) {\n            buildOptions.html.collapseWhitespace = true;\n        }\n        logger.debug('building with options', buildOptions);\n        if (options.env && options.env.build) {\n            logger.debug('env.build() found in options');\n            logger.debug('building via env.build()...');\n            return options.env.build(buildOptions, config);\n        }\n        logger.debug('building via standard build()...');\n        return build(buildOptions, config);\n    }\n}\nexports.BuildCommand = BuildCommand;\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/node_modules/polymer-cli/lib/commands/help.js":"/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\"use strict\";\nconst chalk = require('chalk');\nconst commandLineUsage = require('command-line-usage');\nconst logging = require('plylog');\nconst args_1 = require('../args');\nlet logger = logging.getLogger('cli.command.help');\nconst b = chalk.blue;\nconst m = chalk.magenta;\nconst CLI_TITLE = chalk.bold.underline('Polymer-CLI');\nconst CLI_DESCRIPTION = 'The multi-tool for Polymer projects';\nconst CLI_USAGE = 'Usage: \\`polymer <command> [options ...]\\`';\nconst HELP_HEADER = '\\n' +\n    b('   /\\\\˜˜/   ') + m('/\\\\˜˜/') + b('\\\\   ') + '\\n' +\n    b('  /__\\\\/   ') + m('/__\\\\/') + b('__\\\\  ') + '  ' + CLI_TITLE + '\\n' +\n    b(' /\\\\  /   ') + m('/\\\\  /') + b('\\\\  /\\\\ ') + '\\n' +\n    b('/__\\\\/   ') + m('/__\\\\/  ') + b('\\\\/__\\\\') + '  ' + CLI_DESCRIPTION + '\\n' +\n    b('\\\\  /\\\\  ') + m('/\\\\  /   ') + b('/\\\\  /') + '\\n' +\n    b(' \\\\/__\\\\') + m('/__\\\\/   ') + b('/__\\\\/ ') + '  ' + CLI_USAGE + '\\n' +\n    b('  \\\\  ') + m('/\\\\  /   ') + b('/\\\\  /  ') + '\\n' +\n    b('   \\\\') + m('/__\\\\/   ') + b('/__\\\\/   ') + '\\n';\nclass HelpCommand {\n    constructor(commands) {\n        this.name = 'help';\n        this.description = 'Shows this help message, or help for a specific command';\n        this.args = [{\n                name: 'command',\n                description: 'The command to display help for',\n                defaultOption: true,\n            }];\n        this.commands = new Map();\n        this.commands = commands;\n    }\n    generateGeneralUsage() {\n        return commandLineUsage([\n            {\n                content: HELP_HEADER,\n                raw: true,\n            },\n            {\n                header: 'Available Commands',\n                content: Array.from(this.commands.values()).map((command) => {\n                    return { name: command.name, summary: command.description };\n                }),\n            },\n            {\n                header: 'Global Options',\n                optionList: args_1.globalArguments\n            },\n            {\n                content: 'Run `polymer help <command>` for help with a specific command.',\n                raw: true,\n            }\n        ]);\n    }\n    generateCommandUsage(command) {\n        return commandLineUsage([\n            {\n                header: `polymer ${command.name}`,\n                content: command.description,\n            },\n            {\n                header: 'Command Options',\n                optionList: command.args\n            },\n            {\n                header: 'Global Options',\n                optionList: args_1.globalArguments\n            },\n        ]);\n    }\n    run(options, _config) {\n        return new Promise((resolve, _) => {\n            if (!options || !options.command) {\n                logger.debug('no command given, printing general help...', { options: options });\n                console.log(this.generateGeneralUsage());\n                resolve(null);\n                return;\n            }\n            let command = this.commands.get(options.command);\n            if (!command) {\n                logger.error(`'${options.command}' is not an available command.`);\n                console.log(this.generateGeneralUsage());\n                resolve(null);\n                return;\n            }\n            logger.debug(`printing help for command '${command.name}'...`);\n            console.log(this.generateCommandUsage(command));\n            resolve(null);\n        });\n    }\n}\nexports.HelpCommand = HelpCommand;\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/node_modules/polymer-cli/lib/commands/init.js":"/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\"use strict\";\nconst logging = require('plylog');\nlet logger = logging.getLogger('cli.command.init');\nclass InitCommand {\n    constructor() {\n        this.name = 'init';\n        this.description = 'Initializes a Polymer project';\n        this.args = [\n            {\n                name: 'name',\n                description: 'The template name to use to initialize the project',\n                type: String,\n                defaultOption: true,\n            }\n        ];\n    }\n    run(options, _config) {\n        // Defer dependency loading until needed\n        const polymerInit = require('../init/init');\n        if (options.name) {\n            let templateName = options.name;\n            let generatorName = `polymer-init-${templateName}:app`;\n            logger.debug('template name provided', {\n                generator: generatorName,\n                template: templateName,\n            });\n            return polymerInit.runGenerator(generatorName, options);\n        }\n        logger.debug('no template name provided, prompting user...');\n        return polymerInit.promptGeneratorSelection();\n    }\n}\nexports.InitCommand = InitCommand;\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/node_modules/polymer-cli/lib/commands/lint.js":"/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\"use strict\";\nconst commandLineArgs = require('command-line-args');\nconst logging = require('plylog');\nlet logger = logging.getLogger('cli.lint');\nclass LintCommand {\n    constructor() {\n        this.name = 'lint';\n        this.description = 'Lints the project';\n        this.args = [\n            {\n                name: 'input',\n                type: String,\n                alias: 'i',\n                defaultOption: true,\n                multiple: true,\n                description: 'Files and/or folders to lint. Exclusive. Defaults to cwd.'\n            },\n            {\n                name: 'policy',\n                type: String,\n                alias: 'p',\n                description: 'Your jsconf.json policy file.',\n                defaultValue: null\n            },\n            {\n                name: 'config-file',\n                type: String,\n                defaultValue: 'bower.json',\n                description: ('If inputs are specified, look for `config-field` in this JSON file.')\n            },\n            {\n                name: 'config-field',\n                type: String,\n                defaultValue: 'main',\n                description: ('If config-file is used for inputs, this field determines which ' +\n                    'file(s) are linted.')\n            },\n            {\n                name: 'follow-dependencies',\n                type: Boolean,\n                description: ('Follow through and lint dependencies. This is default behavior ' +\n                    'when linting your entire application via the entrypoint, shell, ' +\n                    'and fragment arguments.')\n            },\n            {\n                name: 'no-follow-dependencies',\n                type: Boolean,\n                description: ('Only lint the files provided, ignoring dependencies. This is ' +\n                    'default behavior when linting a specific list of files provided ' +\n                    'via the input argument.')\n            }\n        ];\n    }\n    run(options, config) {\n        // Defer dependency loading until this specific command is run\n        const polylint = require('polylint/lib/cli');\n        let lintFiles = options.input\n            || config.inputs.map((i) => i.substring(config.root.length));\n        if (lintFiles.length === 0) {\n            logger.warn('No inputs specified. Please use the --input, --entrypoint, ' +\n                '--shell or --fragment flags');\n            let argsCli = commandLineArgs(this.args);\n            console.info(argsCli.getUsage({\n                title: `polymer ${this.name}`,\n                description: this.description,\n            }));\n            return Promise.resolve();\n        }\n        // Default to false if input files are provided, otherwise default to true\n        let followDependencies = !options.input;\n        if (options['follow-dependencies']) {\n            followDependencies = true;\n        }\n        else if (options['no-follow-dependencies']) {\n            followDependencies = false;\n        }\n        return polylint.runWithOptions({\n            input: lintFiles,\n            root: config.root,\n            // TODO: read into config\n            bowerdir: 'bower_components',\n            policy: options.policy,\n            'config-file': options['config-file'],\n            'config-field': options['config-field'],\n            // NOTE: `no-recursion` has the opposite behavior of `follow-dependencies`\n            'no-recursion': !followDependencies,\n        }).then(() => null);\n    }\n}\nexports.LintCommand = LintCommand;\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/node_modules/polymer-cli/lib/commands/serve.js":"/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\"use strict\";\nconst logging = require('plylog');\nlet logger = logging.getLogger('cli.command.serve');\nclass ServeCommand {\n    constructor() {\n        this.name = 'serve';\n        this.description = 'Runs the polyserve development server';\n        this.args = [\n            {\n                name: 'port',\n                alias: 'p',\n                description: 'The port to serve from. Defaults to 8080',\n                type: Number,\n            },\n            {\n                name: 'hostname',\n                alias: 'H',\n                description: 'The hostname to serve from. Defaults to localhost',\n                type: String,\n            },\n            {\n                name: 'package-name',\n                alias: 'n',\n                description: 'The package name to use for the root directory. Defaults ' +\n                    'to reading from bower.json',\n                type: String,\n            },\n            {\n                name: 'open',\n                alias: 'o',\n                description: 'The page to open in the default browser on startup.',\n                type: Boolean,\n            },\n            {\n                name: 'browser',\n                alias: 'b',\n                description: 'The browser(s) to open with when using the --open option.' +\n                    ' Defaults to your default web browser.',\n                type: String,\n                multiple: true,\n            },\n            {\n                name: 'open-path',\n                description: 'The URL path to open when using the --open option.' +\n                    ' Defaults to \"index.html\".',\n                type: String,\n            },\n            {\n                name: 'root',\n                defaultOption: true,\n            },\n        ];\n    }\n    run(options, config) {\n        // Defer dependency loading until this specific command is run\n        const polyserve = require('polyserve');\n        let openPath;\n        if (config.entrypoint && config.shell) {\n            openPath = config.entrypoint.substring(config.root.length);\n            if (openPath === 'index.html' || openPath === '/index.html') {\n                openPath = '/';\n            }\n        }\n        let serverOptions = {\n            root: config.root,\n            port: options.port,\n            hostname: options.hostname,\n            open: options.open,\n            openPath: openPath,\n            browser: options.browser,\n            componentDir: options['component-dir'],\n            packageName: options['package-name'],\n        };\n        logger.debug('serving with options', serverOptions);\n        const env = options.env;\n        if (env && env.serve) {\n            logger.debug('env.serve() found in options');\n            logger.debug('serving via env.serve()...');\n            return env.serve(serverOptions);\n        }\n        logger.debug('serving via polyserve.startServer()...');\n        return polyserve.startServer(serverOptions);\n    }\n}\nexports.ServeCommand = ServeCommand;\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/node_modules/polymer-cli/lib/commands/test.js":"\"use strict\";\nclass TestCommand {\n    constructor() {\n        this.name = 'test';\n        this.description = 'Runs web-component-tester';\n        this.args = [\n            {\n                name: 'persistent',\n                alias: 'p',\n                description: 'Keep browsers active (refresh to rerun tests)',\n                type: Boolean,\n            },\n            {\n                name: 'plugin',\n                description: 'Plugins that should be loaded',\n                type: String,\n            },\n            {\n                name: 'skip-plugin',\n                description: 'Configured plugins that should _not_ be loaded',\n                type: String,\n            },\n            {\n                name: 'expanded',\n                description: 'Log a status line for each test run',\n                type: String,\n            },\n            {\n                name: 'simpleOutput',\n                description: 'Avoid fancy terminal output',\n                type: String,\n            },\n            {\n                name: 'skip-update-check',\n                description: \"Don't check for updates\",\n                type: String,\n            },\n            {\n                name: 'webserver-port',\n                description: 'A port to use for the test webserver',\n                type: String,\n            },\n            {\n                name: 'color',\n                description: '',\n                type: String,\n            },\n            {\n                name: 'local',\n                alias: 'l',\n                description: \"Local browsers to run tests on, or 'all'\",\n                type: String,\n            },\n            {\n                name: 'selenium-arg',\n                description: 'Additional selenium server arguments. Port is auto-selected.',\n                type: String,\n            },\n            {\n                name: 'skip-selenium-install',\n                description: 'Skip trying to install selenium',\n                type: String,\n            },\n            {\n                name: 'sauce-access-key',\n                description: 'Sauce Labs access key',\n                type: String,\n            },\n            {\n                name: 'sauce',\n                alias: 's',\n                description: \"Remote Sauce Labs browsers to run tests on, or 'default'\",\n                type: String,\n            },\n            {\n                name: 'build-number',\n                description: 'The build number tested by this test for the sauce labs REST API',\n                type: String,\n            },\n            {\n                name: 'job-name',\n                description: 'Job name for the sauce labs REST API',\n                type: String,\n            },\n            {\n                name: 'port',\n                description: 'Select an alternative port for Sauce Connect (default is 4445)',\n                type: String,\n            },\n            {\n                name: 'sauce-tunnel-id',\n                description: 'Sauce Connect tunnel identifier',\n                type: String,\n            },\n            {\n                name: 'sauce-username',\n                description: 'Sauce Labs username',\n                type: String,\n            },\n            {\n                name: 'visibility',\n                description: \"Set job visibility to 'public', 'public restricted', 'share', 'team' or 'private'\",\n                type: String,\n            },\n        ];\n    }\n    run(_options, _config) {\n        // Defer dependency loading until this specific command is run\n        const wct = require('web-component-tester');\n        return wct.cli.run(process.env, process.argv.slice(3), process.stdout);\n    }\n}\nexports.TestCommand = TestCommand;\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/node_modules/polymer-cli/lib/project-config.js":"/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\"use strict\";\nconst fs = require('fs');\nconst path = require('path');\nconst logging = require('plylog');\nconst logger = logging.getLogger('cli.project-config');\nexports.defaultSourceGlobs = [\n    'src/**/*',\n    // NOTE(fks) 06-29-2016: `polymer-cli serve` uses a bower.json file to display\n    // information about the project. The file is included here by default.\n    'bower.json',\n];\nclass ProjectConfig {\n    constructor(defaultOptions, overrideOptions) {\n        if (typeof defaultOptions === 'string') {\n            defaultOptions = ProjectConfig.fromConfigFile(defaultOptions) || {};\n        }\n        this._init(defaultOptions, overrideOptions);\n    }\n    static fromConfigFile(filepath) {\n        try {\n            let configContent = fs.readFileSync(filepath, 'utf-8');\n            return JSON.parse(configContent);\n        }\n        catch (error) {\n            // swallow \"not found\" errors because they are so common / expected\n            if (error.code === 'ENOENT') {\n                logger.debug('no polymer config file found', { file: filepath });\n                return;\n            }\n            // throw all other errors when a config exists but was not properly read\n            logger.error('Failed to load/parse polymer config file', {\n                file: filepath,\n                err: error.message,\n            });\n            throw error;\n        }\n    }\n    _init(defaultOptions, overrideOptions) {\n        let options = Object.assign({}, defaultOptions, overrideOptions);\n        this.root = process.cwd();\n        this.sourceGlobs = options.sources || options.sourceGlobs || exports.defaultSourceGlobs;\n        this.includeDependencies = options['include-dependencies'] || options.includeDependencies;\n        if (options.root) {\n            this.root = path.resolve(this.root, options.root);\n        }\n        if (options.entrypoint) {\n            this.entrypoint = path.resolve(this.root, options.entrypoint);\n        }\n        else {\n            // fallback\n            this.entrypoint = path.resolve(this.root, 'index.html');\n            try {\n                let bowerConfigContent = fs.readFileSync(path.resolve(this.root, 'bower.json'), 'utf-8');\n                let bowerConfig = JSON.parse(bowerConfigContent);\n                if (bowerConfig.main && typeof bowerConfig.main === 'string') {\n                    this.entrypoint = path.resolve(this.root, bowerConfig.main);\n                }\n            }\n            catch (error) {\n            }\n        }\n        if (options.shell) {\n            this.shell = path.resolve(this.root, options.shell);\n        }\n        this.fragments = [];\n        // fragment comes from command-line-args `--fragment`\n        let frag = options.fragment || options.fragments;\n        if (frag) {\n            this.fragments = frag.map((e) => path.resolve(this.root, e));\n        }\n        this.inputs = [];\n        if (this.entrypoint)\n            this.inputs.push(this.entrypoint);\n        if (this.shell)\n            this.inputs.push(this.shell);\n        this.inputs = this.inputs.concat(this.fragments);\n    }\n}\nexports.ProjectConfig = ProjectConfig;\n","/home/travis/build/npmtest/node-npmtest-polymer-cli/node_modules/polymer-cli/gulpfile.js":"/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\n'use strict';\n\nconst depcheck = require('depcheck');\nconst eslint = require('gulp-eslint');\nconst fs = require('fs-extra');\nconst gulp = require('gulp');\nconst mergeStream = require('merge-stream');\nconst mocha = require('gulp-mocha');\nconst path = require('path');\nconst runSeq = require('run-sequence');\nconst tslint = require(\"gulp-tslint\");\nconst typescript = require('gulp-typescript');\n\nconst tsProject = typescript.createProject('tsconfig.json');\n\ngulp.task('lint', ['tslint', 'eslint', 'depcheck']);\n\ngulp.task('clean', (done) => {\n  fs.remove(path.join(__dirname, 'lib'), done);\n});\n\ngulp.task('build', ['clean'], () => {\n  let tsReporter = typescript.reporter.defaultReporter();\n  return mergeStream(\n      tsProject.src().pipe(tsProject(tsReporter)),\n      gulp.src(['src/**/*', '!src/**/*.ts'])\n    ).pipe(gulp.dest('lib'));\n});\n\ngulp.task('test', ['build'], () =>\n  gulp.src('test/unit/**/*_test.js', {read: false})\n      .pipe(mocha({\n        ui: 'tdd',\n        reporter: 'spec',\n      }))\n);\n\ngulp.task('test:integration', ['build'], () =>\n  gulp.src(['test/integration/**/*_test.js'], {read: false})\n      .pipe(mocha({\n        ui: 'tdd',\n        reporter: 'spec',\n      }))\n);\n\n\ngulp.task('tslint', () =>\n  gulp.src('src/**/*.ts')\n    .pipe(tslint({\n      configuration: 'tslint.json',\n    }))\n    .pipe(tslint.report('verbose')));\n\ngulp.task('eslint', () =>\n  gulp.src('test/**/*_test.js')\n    .pipe(eslint())\n    .pipe(eslint.format())\n    .pipe(eslint.failAfterError()));\n\ngulp.task('depcheck', () =>\n  depcheck(__dirname, {\n      // \"@types/*\" dependencies are type declarations that are automatically\n      // loaded by TypeScript during build. depcheck can't detect this\n      // so we ignore them here.\n      ignoreMatches: ['@types/*', 'vinyl']\n    })\n    .then((result) => {\n      let invalidFiles = Object.keys(result.invalidFiles) || [];\n      let invalidJsFiles = invalidFiles.filter((f) => f.endsWith('.js'));\n      if (invalidJsFiles.length > 0) {\n        throw new Error(`Invalid files: ${invalidJsFiles}`);\n      }\n      if (result.dependencies.length) {\n        throw new Error(`Unused dependencies: ${result.dependencies}`);\n      }\n  }));\n"}